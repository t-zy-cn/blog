import{escapeHtml as s}from"@mdit/helper";import{tex as u}from"@mdit/plugin-tex";let p=!0,n;try{n=(await import("katex")).default}catch{/* istanbul ignore next -- @preserve */p=!1}const x=(t,a,o)=>{let r;try{r=n.renderToString(t,{...a,displayMode:!1})}catch(e){/* istanbul ignore else -- @preserve */if(e instanceof n.ParseError)console.error(e),r=`<span class='katex-error' title='${s(e.toString())}'>${s(t)}</span>`;else throw e}return o?.(r,!1)??r},y=(t,a,o)=>{let r;try{r=`<p class='katex-block'>${n.renderToString(t,{...a,displayMode:!0})}</p>
`}catch(e){/* istanbul ignore else -- @preserve */if(e instanceof n.ParseError)console.error(e),r=`<p class='katex-block katex-error' title='${s(e.toString())}'>${s(t)}</p>
`;else throw e}return o?.(r,!0)??r},S=async()=>{await import("katex/contrib/mhchem")},$=(t,a={})=>{/* istanbul ignore if -- @preserve */if(!p)throw new Error('[@mdit/plugin-katex]: "katex" not installed!');const{allowInlineWithSpace:o=!1,mathFence:r=!1,logger:e=l=>l==="newLineInDisplayMode"?"ignore":"warn",macros:f={},transformer:i,...m}=a;t.use(u,{allowInlineWithSpace:o,mathFence:r,render:(l,d,h)=>{const c={strict:(w,k,g)=>e(w,k,g,h)??"ignore",macros:f,throwOnError:!1,...m};return d?y(l,c,i):x(l,c,i)}})};export{$ as katex,S as loadMhchem};
//# sourceMappingURL=index.js.map
